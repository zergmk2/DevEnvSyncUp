== Idioms.function == map:if, shortcut:f  ==
/*
 *  |?FUNCTION_NAME| - <CURSOR>
 *  @:
 *  Description:
 */
void |FUNCTION_NAME| ( <+argument_list+> )
{
<SPLIT>	return <+return_value+>;
}
== Idioms.function-static == map:isf, shortcut:t  ==
/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  |?FUNCTION_NAME|
 *  Description:  
 * =====================================================================================
 */
static void<CURSOR>
|FUNCTION_NAME| ( <+argument_list+> )
{
<SPLIT>	return <+return_value+>;
}		/* -----  end of static function |FUNCTION_NAME|  ----- */
== Idioms.main == map:im, shortcut:m  ==
#include	<stdlib.h>

/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  main
 *  Description:  
 * =====================================================================================
 */
int main ( int argc, char *argv[] )
{<CURSOR>
<SPLIT>	return EXIT_SUCCESS;
}				/* ----------  end of function main  ---------- */
== Idioms.enum == map:ie, shortcut:e  ==
/**
 * enum |?ENUM_NAME| - <CURSOR>
 * @a: first member
 * @b: second member
 *
 * Description:
 */
enum |ENUM_NAME| {
<SPLIT>};
== Idioms.struct == map:is, shortcut:s  ==
/**
 * struct |?STRUCT_NAME| - <CURSOR>
 * @a: first member
 * @b: second member
 *
 * Description:
 */
struct |STRUCT_NAME| {
<SPLIT>};
== Idioms.union == map:iu, shortcut:u  ==
union |?UNION_NAME| {<CURSOR>
<SPLIT>};				/* ----------  end of union |UNION_NAME|  ---------- */

typedef union |UNION_NAME| |UNION_NAME:c|;
== Idioms.scanf == map:isc, shortcut:s, insert  ==
scanf ( "<CURSOR>", & );

== Idioms.printk == map:ipr, shortcut:r, insert  ==
printf("|?POINTER| = %<CURSOR>\n", |POINTER|);

== Idioms.printf == map:ipp, insert  ==
printf("============ %s %d ==============\n", __func__, __LINE__);

== Idioms.printfs == map:ipf, insert  ==
printf("==== %s ====\n", __func__);

== Idioms.calloc == map:ica, shortcut:c  ==
|?POINTER| = kcalloc( (size_t)(<CURSOR><+COUNT+>), sizeof(<+TYPE+>) );
if (|POINTER| == NULL) {
	pr_err("|POINTER| memory allocation failed\n");
	return -ENOMEM;
}

free (|POINTER|);
|POINTER| = NULL;

== Idioms.malloc == map:ima, shortcut:m  ==
|?POINTER| = kmcalloc(sizeof(|POINTER|<CURSOR>));
if (|POINTER| == NULL) {
	pr_err("|POINTER| memory allocation failed\n");
	return -ENOMEM;
}

free (|POINTER|);
|POINTER| = NULL;

== Idioms.kzalloc == map:ikz, shortcut:z  ==
|?POINTER| = kzalloc(sizeof(*|POINTER|<CURSOR>), GFP_KERNEL);
if (|POINTER| == NULL) {
	pr_err("|POINTER| memory allocation failed\n");
	return -ENOMEM;
}

kfree (|POINTER|);
|POINTER| = NULL;

== Idioms.realloc == map:ire, shortcut:r  ==
|?POINTER|	= realloc ( |POINTER|, sizeof(<CURSOR><+TYPE+>) );
if ( |POINTER|==NULL ) {
	fprintf ( stderr, "\ndynamic memory reallocation failed\n" );
	exit (EXIT_FAILURE);
}
== Idioms.dump_stack == map:idm, shortcut:dm, insert  ==
dump_stack();

== Idioms.sizeof == map:isi, shortcut:s, insert  ==
sizeof(<CURSOR><SPLIT>)
== Idioms.assert == map:ias, shortcut:a, insert  ==
assert(<CURSOR><SPLIT>);
== Idioms.open-input-file == map:ii, shortcut:i  ==
FILE	*|?FILEPOINTER|;										/* input-file pointer */
char	*|FILEPOINTER|_file_name = "<CURSOR>";		/* input-file name    */

|FILEPOINTER|	= fopen( |FILEPOINTER|_file_name, "r" );
if ( |FILEPOINTER| == NULL ) {
	fprintf ( stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (EXIT_FAILURE);
}
<SPLIT>{-continue_here-}
if( fclose(|FILEPOINTER|) == EOF ) {			/* close input file   */
	fprintf ( stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (EXIT_FAILURE);
}

== Idioms.open-output-file == map:io, shortcut:o  ==
FILE	*|?FILEPOINTER|;										/* output-file pointer */
char	*|FILEPOINTER|_file_name = "<CURSOR>";		/* output-file name    */

|FILEPOINTER|	= fopen( |FILEPOINTER|_file_name, "w" );
if ( |FILEPOINTER| == NULL ) {
	fprintf ( stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (EXIT_FAILURE);
}
<SPLIT>{-continue_here-}
if( fclose(|FILEPOINTER|) == EOF ) {			/* close output file   */
	fprintf ( stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (EXIT_FAILURE);
}

== Idioms.fprintf == map:ifsc, shortcut:f, insert  ==
fprintf ( |?FILEPOINTER|, "<CURSOR>\n",  );
== Idioms.fscanf == map:ifpr, shortcut:f, insert  ==
fscanf ( |?FILEPOINTER|, "<CURSOR>", & );
